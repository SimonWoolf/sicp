Special Forms like (define x 3) are an exception to the general evaluation rule, as it oesn't
evaluate to something that just depends on the value of x and 3 (x has no value)

applicative-order evaluation -- eagerly evaluate all parameters*before* expanding the procedure definition. (what lisp actually does)

normal-order evaluation -- expand procedure definition first. only evaluate when the actual argument values are needed. Lazy evaluation, in other words. effective outcome: expand everything until you get an operation involving only primitive types, then evaluate.

a procedure definition binds its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition. If a variable is not bound, it is free. The set of expressions for which a binding defines a name is called the scope of that name. (eg scope of a formal parameter in a define is the body of the define)

Lexical scoping: free variables in a procedure are looked up in the environment where the procedure was defined, not where it's called.
This allows block structure -- eg (define (f x) (define (helper a) (.. x a)) ... )

Note: functions are dispatched based just on their name, not on number of parameters.

Control flow
- (cond (<p> <e> <e> ...) (<p> <e>) (else <e>) ... ) -- last expression in sequence returned
- (if <p> <e if true> <e if false>)
- and, or, not -- and & or short circut, which means they're special forms, not procedures

Linear recursive process -- length of chain of deferred operations is linear with number of steps.

iterative process -- all we need to keep track of are the current values of the parameters.
State at any point is summarised by a fixed number of state variables. I.e. don't need any
hidden info (like the interpreter stack for a recursive process..)

A recursive procedure is the syntactic fact that it calls itself. That may or may not result in
a recursive *process*. (tail-call-optimisable <=> it does not, the process is inherently iterative)

Tree recursion -- fn calls itself more than once. (Will definitly be a recursive process). E.g. fib.
 - Space-complexity: height of the tree (e.g. for fib, linear -- when computing fib(n) need to keep track of values of fib(0) through fib(n-1))
 - Time-complexity: no. of nodes in the tree (e.g. for fib, exponential)

(for fib, much better to use the iterative process! question -- is this equivalent to memoizing the recursive one? (in terms of time-complexity), I mean - obviously not equivalent in terms of needing a stack)

-

anonymous functions: (lambda (x y) <body>)

let expressions:
(let ((⟨var₁⟩ ⟨exp₁⟩)
      (⟨var₂⟩ ⟨exp₂⟩)) ;
      …
  ⟨body⟩)

is syntactic sugar for:
((lambda (⟨var₁⟩ … )
   ⟨body⟩)
 ⟨exp₁⟩
 …
 )

i.e. if f(g(x), h(x)), let lets you define g and h first then define f in terms of it
which is more intuitive than defining f as a lambda then applying it to expressions for
g and h.

warning: that means that you can't define let-exprs in terms of other let-exprs

--

(cons a b) makes a list. car gets the first, cdr the second.

--

Church numerals
===============
three is a threeifier, a thing that makes 'do f'
into 'do f.f.f' (. = function composition).

So addition: a + b -> \f -> ( \x -> a(f)( b(f)(x)) )
(do the f's from b to x, then the f's from a)
multiplication: a*b -> \f -> ( a(b(f)) )
(each of the f's in b substitutes all the f's in a)
(i.e. a.b where . = function composition)
exponentiation: a^b -> (b(a))
(each of the f's in b substitutes for a itself -- i.e.
a 'threeifier')
tetration: ...?

lists
=====

(list ⟨a₁⟩ ⟨a₂⟩ … ⟨aₙ⟩) =
(cons ⟨a₁⟩
      (cons ⟨a₂⟩
            (cons …
                  (cons ⟨aₙ⟩
                        nil)…)))

(cadddr l) = (car (cdr (cdr (cdr l))))
  = fourth element of l

useful procedures:

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))
(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items)
                (- n 1))))
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1)
            (append (cdr list1)
                    list2))))
(define (last-pair l)
  (if (null? (cdr l))
      l
      (last-pair (cdr l))))

(define (reverse l)
  (if (= 0 (length l))
      '()
      (append (reverse (cdr l))
              (list (car l)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op
                      initial
                      (cdr sequence)))))
-------

dotted-tail notation - (define (g f . w) (...))
is like def g(f, *w)

-------

Map, filter, accumulate -- the operator is the first argment, then initial (for acc), then last is the sequence.

When building a list with map etc., use cons not list - it's done one element at a time (right-folding), so consing at each stage gives you a normal list structure

right vs left fold:
left-folding is like iteration - starting from the first element, combining it with the accumulator, then moving rightwards.
right-folding is like recursion - still nominally starting with the first element, but the work is done on the way back down - once you've got to the last element you combine that with the acc and return that to the call one level up the stack.

Default accumulate is right-fold. Lisp lists are right-folded with cons.

Note: *they also combine their arguments in opposite order*! accumulate does (op item accumulator), fold-left does (op accumulator item)!
(why? to maintain sequence order, I guess...? so e.g. (list 1 2) will be (1 op (2 op initial)) or ((initial op 1) op 2), but always 1 is on the left...)
(Except racket#'s built-in foldl differs from sicp's fold-left in this! It uses (op item accumulator, same as foldr, and doesn't preserve sequence order!)
Note: if using lambda you can use the arguments to your op in any order you like - but difference still matters when passing builtins to fold (/, string-append, etc.)

-------

= - numerical-only equality
eq? - object identity (works as equality for symbols as they are singletons)
equal? - object equality

-------

; any? and all? helpers

(define (all? proc list)
  (if
    (null? list)
    #t
    (and (proc (car list))
         (all? proc (cdr list)))
    ))

(define (any? proc list)
  (if
    (null? list)
    #f
    (or (proc (car list))
        (all? proc (cdr list)))
    ))

--

Debugging in racket
===================
(displayln ...)
(newline)
